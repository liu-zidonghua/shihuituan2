{"name": "test_mini_home_add_cart", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to remote server. Original error: Error: socket hang up", "trace": "self = <testcase.miniprogram.test_addcart.TestMiniAddCart object at 0x000002B34B5EB8C8>\n\n        @allure.step(\"首页商品加入购物车验证\")\n        def test_mini_home_add_cart(self):\n            with allure.step('1：小程序初始化'):\n                mp_driver = Login().go_in()\n            with allure.step('2：通过张珊珊小程序链接进入首页'):\n                MiniDifferentName(mp_driver).mini_op_name_link_z()\n            with allure.step('3：删除购物车商品'):\n                time.sleep(5)\n            #   MiniShoppingCart(mp_driver).mini_op_cart_del_goods(mp_driver)\n            # 跳转购物车页面\n            MiniShoppingCart(mp_driver).mini_op_shopping_cart()\n            try:\n                time.sleep(2)\n                for i in range(8):\n                    # 如果存在全选按钮\n    #                if mp_driver.find_element_by_android_uiautomator(\n     #                       '.className(\"android.widget.Image\").index(3)'):\n                    MiniShoppingCart(mp_driver).mini_op_delete_goods(mp_driver)\n     #                   continue\n                    break\n            except:\n                    print(\"购物车内无商品\")\n            with allure.step('3：单规格商品首页加号加购物车'):\n>               MiniGroupBuy(mp_driver).mini_op_goods_single_specification_add_cart(mp_driver)\n\ntestcase\\miniprogram\\test_addcart.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \naction\\miniprogram\\mini_program_home_and_class.py:212: in mini_op_goods_single_specification_add_cart\n    self.wait_presence_element(MINI_BUTTON_SHOPPING_CART_JUMP_HOME).click()\naction\\base_page.py:25: in wait_presence_element\n    find_element = wait.until(ec.presence_of_element_located(locator))\nf:\\python\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:71: in until\n    value = method(self._driver)\nf:\\python\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:64: in __call__\n    return _find_element(driver, self.locator)\nf:\\python\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:415: in _find_element\n    raise e\nf:\\python\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:411: in _find_element\n    return driver.find_element(*by)\nf:\\python\\lib\\site-packages\\appium\\webdriver\\webdriver.py:284: in find_element\n    'value': value})['value']\nf:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: in execute\n    self.error_handler.check_response(response)\nf:\\python\\lib\\site-packages\\appium\\webdriver\\errorhandler.py:29: in check_response\n    raise wde\nf:\\python\\lib\\site-packages\\appium\\webdriver\\errorhandler.py:24: in check_response\n    super(MobileErrorHandler, self).check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x000002B34B5EFF08>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"An unknown server-side error occurred while pro...\\\\\\\\app\\\\\\\\node_modules\\\\\\\\appium\\\\\\\\node_modules\\\\\\\\appium-base-driver\\\\\\\\lib\\\\\\\\jsonwp-proxy\\\\\\\\proxy.js:261:13)\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to remote server. Original error: Error: socket hang up\n\nf:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: WebDriverException"}, "steps": [{"name": "首页商品加入购物车验证", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to remote server. Original error: Error: socket hang up\n\n", "trace": "  File \"f:\\python\\lib\\site-packages\\allure_commons\\_allure.py\", line 157, in impl\n    return func(*a, **kw)\n  File \"F:\\shihuituan\\testcase\\miniprogram\\test_addcart.py\", line 42, in test_mini_home_add_cart\n    MiniGroupBuy(mp_driver).mini_op_goods_single_specification_add_cart(mp_driver)\n  File \"F:\\shihuituan\\action\\miniprogram\\mini_program_home_and_class.py\", line 212, in mini_op_goods_single_specification_add_cart\n    self.wait_presence_element(MINI_BUTTON_SHOPPING_CART_JUMP_HOME).click()\n  File \"F:\\shihuituan\\action\\base_page.py\", line 25, in wait_presence_element\n    find_element = wait.until(ec.presence_of_element_located(locator))\n  File \"f:\\python\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 71, in until\n    value = method(self._driver)\n  File \"f:\\python\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py\", line 64, in __call__\n    return _find_element(driver, self.locator)\n  File \"f:\\python\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py\", line 415, in _find_element\n    raise e\n  File \"f:\\python\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py\", line 411, in _find_element\n    return driver.find_element(*by)\n  File \"f:\\python\\lib\\site-packages\\appium\\webdriver\\webdriver.py\", line 284, in find_element\n    'value': value})['value']\n  File \"f:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 321, in execute\n    self.error_handler.check_response(response)\n  File \"f:\\python\\lib\\site-packages\\appium\\webdriver\\errorhandler.py\", line 29, in check_response\n    raise wde\n  File \"f:\\python\\lib\\site-packages\\appium\\webdriver\\errorhandler.py\", line 24, in check_response\n    super(MobileErrorHandler, self).check_response(response)\n  File \"f:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 242, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "steps": [{"name": "1：小程序初始化", "status": "passed", "start": 1589274332028, "stop": 1589274377630}, {"name": "2：通过张珊珊小程序链接进入首页", "status": "passed", "start": 1589274377630, "stop": 1589274384684}, {"name": "3：删除购物车商品", "status": "passed", "start": 1589274384684, "stop": 1589274389685}, {"name": "3：单规格商品首页加号加购物车", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to remote server. Original error: Error: socket hang up\n\n", "trace": "  File \"F:\\shihuituan\\testcase\\miniprogram\\test_addcart.py\", line 42, in test_mini_home_add_cart\n    MiniGroupBuy(mp_driver).mini_op_goods_single_specification_add_cart(mp_driver)\n  File \"F:\\shihuituan\\action\\miniprogram\\mini_program_home_and_class.py\", line 212, in mini_op_goods_single_specification_add_cart\n    self.wait_presence_element(MINI_BUTTON_SHOPPING_CART_JUMP_HOME).click()\n  File \"F:\\shihuituan\\action\\base_page.py\", line 25, in wait_presence_element\n    find_element = wait.until(ec.presence_of_element_located(locator))\n  File \"f:\\python\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 71, in until\n    value = method(self._driver)\n  File \"f:\\python\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py\", line 64, in __call__\n    return _find_element(driver, self.locator)\n  File \"f:\\python\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py\", line 415, in _find_element\n    raise e\n  File \"f:\\python\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py\", line 411, in _find_element\n    return driver.find_element(*by)\n  File \"f:\\python\\lib\\site-packages\\appium\\webdriver\\webdriver.py\", line 284, in find_element\n    'value': value})['value']\n  File \"f:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 321, in execute\n    self.error_handler.check_response(response)\n  File \"f:\\python\\lib\\site-packages\\appium\\webdriver\\errorhandler.py\", line 29, in check_response\n    raise wde\n  File \"f:\\python\\lib\\site-packages\\appium\\webdriver\\errorhandler.py\", line 24, in check_response\n    super(MobileErrorHandler, self).check_response(response)\n  File \"f:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 242, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1589274393929, "stop": 1589274419975}], "start": 1589274332028, "stop": 1589274419978}], "attachments": [{"name": "stdout", "source": "82c244b7-b106-4fbd-90fd-deff3417b11e-attachment.txt", "type": "text/plain"}], "start": 1589274332027, "stop": 1589274419980, "uuid": "1bd8c2db-5bf1-4abe-9458-b83c269e1065", "historyId": "f21ca522bffa90128f32fa4c36477745", "testCaseId": "231c70d819b604e72184aab2440dbf18", "fullName": "testcase.miniprogram.test_addcart.TestMiniAddCart#test_mini_home_add_cart", "labels": [{"name": "parentSuite", "value": "testcase.miniprogram"}, {"name": "suite", "value": "test_addcart"}, {"name": "subSuite", "value": "TestMiniAddCart"}, {"name": "host", "value": "LAPTOP-NFELPBU7"}, {"name": "thread", "value": "11408-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.miniprogram.test_addcart"}]}