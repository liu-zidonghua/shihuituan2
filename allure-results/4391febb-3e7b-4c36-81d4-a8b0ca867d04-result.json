{"name": "test_mini_home_add_cart", "status": "broken", "statusDetails": {"message": "urllib3.exceptions.ProtocolError: ('Connection aborted.', ConnectionAbortedError(10053, '你的主机中的软件中止了一个已建立的连接。', None, 10053, None))", "trace": "self = <urllib3.connectionpool.HTTPConnectionPool object at 0x000002902E797648>, method = 'POST'\nurl = '/wd/hub/session/e72b3ce4-a2dd-4cc1-8093-9379d0533391/element'\nbody = '{\"using\": \"-android uiautomator\", \"value\": \"text(\\\\\"\\\\u53bb\\\\u652f\\\\u4ed8\\\\\")\"}'\nheaders = {'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'appium/python 0.49 (selenium/3.141.0 (python windows))'}\nretries = Retry(total=3, connect=None, read=None, redirect=None, status=None), redirect = False, assert_same_host = False\ntimeout = <object object at 0x000002902E31D6E0>, pool_timeout = None, release_conn = True, chunked = False, body_pos = None\nresponse_kw = {'request_url': 'http://127.0.0.1:4723/wd/hub/session/e72b3ce4-a2dd-4cc1-8093-9379d0533391/element'}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False, timeout_obj = <urllib3.util.timeout.Timeout object at 0x000002902E94F848>\nis_new_proxy_conn = False\n\n    def urlopen(\n        self,\n        method,\n        url,\n        body=None,\n        headers=None,\n        retries=None,\n        redirect=True,\n        assert_same_host=True,\n        timeout=_Default,\n        pool_timeout=None,\n        release_conn=None,\n        chunked=False,\n        body_pos=None,\n        **response_kw\n    ):\n        \"\"\"\n        Get a connection from the pool and perform an HTTP request. This is the\n        lowest level call for making a request, so you'll need to specify all\n        the raw details.\n    \n        .. note::\n    \n           More commonly, it's appropriate to use a convenience method provided\n           by :class:`.RequestMethods`, such as :meth:`request`.\n    \n        .. note::\n    \n           `release_conn` will only behave as expected if\n           `preload_content=False` because we want to make\n           `preload_content=False` the default behaviour someday soon without\n           breaking backwards compatibility.\n    \n        :param method:\n            HTTP request method (such as GET, POST, PUT, etc.)\n    \n        :param body:\n            Data to send in the request body (useful for creating\n            POST requests, see HTTPConnectionPool.post_url for\n            more convenience).\n    \n        :param headers:\n            Dictionary of custom headers to send, such as User-Agent,\n            If-None-Match, etc. If None, pool headers are used. If provided,\n            these headers completely replace any pool-specific headers.\n    \n        :param retries:\n            Configure the number of retries to allow before raising a\n            :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n            Pass ``None`` to retry until you receive a response. Pass a\n            :class:`~urllib3.util.retry.Retry` object for fine-grained control\n            over different types of retries.\n            Pass an integer number to retry connection errors that many times,\n            but no other types of errors. Pass zero to never retry.\n    \n            If ``False``, then retries are disabled and any exception is raised\n            immediately. Also, instead of raising a MaxRetryError on redirects,\n            the redirect response will be returned.\n    \n        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n        :param redirect:\n            If True, automatically handle redirects (status codes 301, 302,\n            303, 307, 308). Each redirect counts as a retry. Disabling retries\n            will disable redirect, too.\n    \n        :param assert_same_host:\n            If ``True``, will make sure that the host of the pool requests is\n            consistent else will raise HostChangedError. When False, you can\n            use the pool on an HTTP proxy and request foreign hosts.\n    \n        :param timeout:\n            If specified, overrides the default timeout for this one\n            request. It may be a float (in seconds) or an instance of\n            :class:`urllib3.util.Timeout`.\n    \n        :param pool_timeout:\n            If set and the pool is set to block=True, then this method will\n            block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n            connection is available within the time period.\n    \n        :param release_conn:\n            If False, then the urlopen call will not release the connection\n            back into the pool once a response is received (but will release if\n            you read the entire contents of the response such as when\n            `preload_content=True`). This is useful if you're not preloading\n            the response's content immediately. You will need to call\n            ``r.release_conn()`` on the response ``r`` to return the connection\n            back into the pool. If None, it takes the value of\n            ``response_kw.get('preload_content', True)``.\n    \n        :param chunked:\n            If True, urllib3 will send the body using chunked transfer\n            encoding. Otherwise, urllib3 will send the body using the standard\n            content-length form. Defaults to False.\n    \n        :param int body_pos:\n            Position to seek to in file-like body in the event of a retry or\n            redirect. Typically this won't need to be set because urllib3 will\n            auto-populate the value when needed.\n    \n        :param \\\\**response_kw:\n            Additional parameters are passed to\n            :meth:`urllib3.response.HTTPResponse.from_httplib`\n        \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get(\"preload_content\", True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        # Ensure that the URL we're connecting to is properly encoded\n        if url.startswith(\"/\"):\n            url = six.ensure_str(_encode_target(url))\n        else:\n            url = six.ensure_str(parse_url(url).url)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/urllib3/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == \"http\":\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(\n                conn, \"sock\", None\n            )\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(\n                conn,\n                method,\n                url,\n                timeout=timeout_obj,\n                body=body,\n                headers=headers,\n>               chunked=chunked,\n            )\n\nf:\\python\\lib\\site-packages\\urllib3\\connectionpool.py:672: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <urllib3.connectionpool.HTTPConnectionPool object at 0x000002902E797648>, conn = <urllib3.connection.HTTPConnection object at 0x000002902E940E48>\nmethod = 'POST', url = '/wd/hub/session/e72b3ce4-a2dd-4cc1-8093-9379d0533391/element'\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002902E94F848>, chunked = False\nhttplib_request_kw = {'body': '{\"using\": \"-android uiautomator\", \"value\": \"text(\\\\\"\\\\u53bb\\\\u652f\\\\u4ed8\\\\\")\"}', 'headers': {'Accept': 'app...ntent-Type': 'application/json;charset=UTF-8', 'User-Agent': 'appium/python 0.49 (selenium/3.141.0 (python windows))'}}\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002902E94F688>\n\n    def _make_request(\n        self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw\n    ):\n        \"\"\"\n        Perform a request on a given urllib connection object taken from our\n        pool.\n    \n        :param conn:\n            a connection from one of our connection pools\n    \n        :param timeout:\n            Socket timeout in seconds for the request. This can be a\n            float or integer, which will set the same timeout value for\n            the socket connect and the socket read, or an instance of\n            :class:`urllib3.util.Timeout`, which gives you more fine-grained\n            control over your timeouts.\n        \"\"\"\n        self.num_requests += 1\n    \n        timeout_obj = self._get_timeout(timeout)\n        timeout_obj.start_connect()\n        conn.timeout = timeout_obj.connect_timeout\n    \n        # Trigger any extra validation we need to do.\n        try:\n            self._validate_conn(conn)\n        except (SocketTimeout, BaseSSLError) as e:\n            # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.\n            self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n            raise\n    \n        # conn.request() calls httplib.*.request, not the method in\n        # urllib3.request. It also calls makefile (recv) on the socket.\n        if chunked:\n            conn.request_chunked(method, url, **httplib_request_kw)\n        else:\n>           conn.request(method, url, **httplib_request_kw)\n\nf:\\python\\lib\\site-packages\\urllib3\\connectionpool.py:387: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <urllib3.connection.HTTPConnection object at 0x000002902E940E48>, method = 'POST'\nurl = '/wd/hub/session/e72b3ce4-a2dd-4cc1-8093-9379d0533391/element'\nbody = '{\"using\": \"-android uiautomator\", \"value\": \"text(\\\\\"\\\\u53bb\\\\u652f\\\\u4ed8\\\\\")\"}'\nheaders = {'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'appium/python 0.49 (selenium/3.141.0 (python windows))'}\n\n    def request(self, method, url, body=None, headers={}, *,\n                encode_chunked=False):\n        \"\"\"Send a complete request to the server.\"\"\"\n>       self._send_request(method, url, body, headers, encode_chunked)\n\nf:\\python\\lib\\http\\client.py:1252: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <urllib3.connection.HTTPConnection object at 0x000002902E940E48>, method = 'POST'\nurl = '/wd/hub/session/e72b3ce4-a2dd-4cc1-8093-9379d0533391/element'\nbody = b'{\"using\": \"-android uiautomator\", \"value\": \"text(\\\\\"\\\\u53bb\\\\u652f\\\\u4ed8\\\\\")\"}'\nheaders = {'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'appium/python 0.49 (selenium/3.141.0 (python windows))'}\nencode_chunked = False\n\n    def _send_request(self, method, url, body, headers, encode_chunked):\n        # Honor explicitly requested Host: and Accept-Encoding: headers.\n        header_names = frozenset(k.lower() for k in headers)\n        skips = {}\n        if 'host' in header_names:\n            skips['skip_host'] = 1\n        if 'accept-encoding' in header_names:\n            skips['skip_accept_encoding'] = 1\n    \n        self.putrequest(method, url, **skips)\n    \n        # chunked encoding will happen if HTTP/1.1 is used and either\n        # the caller passes encode_chunked=True or the following\n        # conditions hold:\n        # 1. content-length has not been explicitly set\n        # 2. the body is a file or iterable, but not a str or bytes-like\n        # 3. Transfer-Encoding has NOT been explicitly set by the caller\n    \n        if 'content-length' not in header_names:\n            # only chunk body if not explicitly set for backwards\n            # compatibility, assuming the client code is already handling the\n            # chunking\n            if 'transfer-encoding' not in header_names:\n                # if content-length cannot be automatically determined, fall\n                # back to chunked encoding\n                encode_chunked = False\n                content_length = self._get_content_length(body, method)\n                if content_length is None:\n                    if body is not None:\n                        if self.debuglevel > 0:\n                            print('Unable to determine size of %r' % body)\n                        encode_chunked = True\n                        self.putheader('Transfer-Encoding', 'chunked')\n                else:\n                    self.putheader('Content-Length', str(content_length))\n        else:\n            encode_chunked = False\n    \n        for hdr, value in headers.items():\n            self.putheader(hdr, value)\n        if isinstance(body, str):\n            # RFC 2616 Section 3.7.1 says that text default has a\n            # default charset of iso-8859-1.\n            body = _encode(body, 'body')\n>       self.endheaders(body, encode_chunked=encode_chunked)\n\nf:\\python\\lib\\http\\client.py:1298: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <urllib3.connection.HTTPConnection object at 0x000002902E940E48>\nmessage_body = b'{\"using\": \"-android uiautomator\", \"value\": \"text(\\\\\"\\\\u53bb\\\\u652f\\\\u4ed8\\\\\")\"}'\n\n    def endheaders(self, message_body=None, *, encode_chunked=False):\n        \"\"\"Indicate that the last header line has been sent to the server.\n    \n        This method sends the request to the server.  The optional message_body\n        argument can be used to pass a message body associated with the\n        request.\n        \"\"\"\n        if self.__state == _CS_REQ_STARTED:\n            self.__state = _CS_REQ_SENT\n        else:\n            raise CannotSendHeader()\n>       self._send_output(message_body, encode_chunked=encode_chunked)\n\nf:\\python\\lib\\http\\client.py:1247: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <urllib3.connection.HTTPConnection object at 0x000002902E940E48>\nmessage_body = b'{\"using\": \"-android uiautomator\", \"value\": \"text(\\\\\"\\\\u53bb\\\\u652f\\\\u4ed8\\\\\")\"}', encode_chunked = False\n\n    def _send_output(self, message_body=None, encode_chunked=False):\n        \"\"\"Send the currently buffered request and clear the buffer.\n    \n        Appends an extra \\\\r\\\\n to the buffer.\n        A message_body may be specified, to be appended to the request.\n        \"\"\"\n        self._buffer.extend((b\"\", b\"\"))\n        msg = b\"\\r\\n\".join(self._buffer)\n        del self._buffer[:]\n        self.send(msg)\n    \n        if message_body is not None:\n    \n            # create a consistent interface to message_body\n            if hasattr(message_body, 'read'):\n                # Let file-like take precedence over byte-like.  This\n                # is needed to allow the current position of mmap'ed\n                # files to be taken into account.\n                chunks = self._read_readable(message_body)\n            else:\n                try:\n                    # this is solely to check to see if message_body\n                    # implements the buffer API.  it /would/ be easier\n                    # to capture if PyObject_CheckBuffer was exposed\n                    # to Python.\n                    memoryview(message_body)\n                except TypeError:\n                    try:\n                        chunks = iter(message_body)\n                    except TypeError:\n                        raise TypeError(\"message_body should be a bytes-like \"\n                                        \"object or an iterable, got %r\"\n                                        % type(message_body))\n                else:\n                    # the object implements the buffer interface and\n                    # can be passed directly into socket methods\n                    chunks = (message_body,)\n    \n            for chunk in chunks:\n                if not chunk:\n                    if self.debuglevel > 0:\n                        print('Zero length chunk ignored')\n                    continue\n    \n                if encode_chunked and self._http_vsn == 11:\n                    # chunked encoding\n                    chunk = f'{len(chunk):X}\\r\\n'.encode('ascii') + chunk \\\n                        + b'\\r\\n'\n>               self.send(chunk)\n\nf:\\python\\lib\\http\\client.py:1065: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <urllib3.connection.HTTPConnection object at 0x000002902E940E48>\ndata = b'{\"using\": \"-android uiautomator\", \"value\": \"text(\\\\\"\\\\u53bb\\\\u652f\\\\u4ed8\\\\\")\"}'\n\n    def send(self, data):\n        \"\"\"Send `data' to the server.\n        ``data`` can be a string object, a bytes object, an array object, a\n        file-like object that supports a .read() method, or an iterable object.\n        \"\"\"\n    \n        if self.sock is None:\n            if self.auto_open:\n                self.connect()\n            else:\n                raise NotConnected()\n    \n        if self.debuglevel > 0:\n            print(\"send:\", repr(data))\n        if hasattr(data, \"read\") :\n            if self.debuglevel > 0:\n                print(\"sendIng a read()able\")\n            encode = self._is_textIO(data)\n            if encode and self.debuglevel > 0:\n                print(\"encoding file using iso-8859-1\")\n            while 1:\n                datablock = data.read(self.blocksize)\n                if not datablock:\n                    break\n                if encode:\n                    datablock = datablock.encode(\"iso-8859-1\")\n                self.sock.sendall(datablock)\n            return\n        try:\n>           self.sock.sendall(data)\nE           ConnectionAbortedError: [WinError 10053] 你的主机中的软件中止了一个已建立的连接。\n\nf:\\python\\lib\\http\\client.py:987: ConnectionAbortedError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testcase.mini.test_2.TestMiniAddCart object at 0x000002902E91B208>\n\n       @allure.step(\"首页商品加入购物车验证\")\n       def test_mini_home_add_cart(self):\n           with allure.step('1：小程序初始化'):\n               mp_driver = Login().go_in()\n           with allure.step('2：通过张珊珊小程序链接进入首页'):\n               MiniDifferentName(mp_driver).mini_op_name_link_z()\n               time.sleep(5)\n               MiniShoppingCart(mp_driver).mini_op_shopping_cart()\n               time.sleep(5)\n    #           try:\n               i = 1\n               for i in range(8):\n    \n    \n>                      a = MiniShoppingCart(mp_driver).mini_op_element_cart_pay()\n\ntestcase\\mini\\test_2.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\naction\\miniprogram\\mini_program_shopping_cart.py:82: in mini_op_element_cart_pay\n    self.wait_presence_element(MINI_BUTTON_SHOPPING_CART_PAY)\naction\\base_page.py:25: in wait_presence_element\n    find_element = wait.until(ec.presence_of_element_located(locator))\nf:\\python\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:71: in until\n    value = method(self._driver)\nf:\\python\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:64: in __call__\n    return _find_element(driver, self.locator)\nf:\\python\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:411: in _find_element\n    return driver.find_element(*by)\nf:\\python\\lib\\site-packages\\appium\\webdriver\\webdriver.py:284: in find_element\n    'value': value})['value']\nf:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:319: in execute\n    response = self.command_executor.execute(driver_command, params)\nf:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py:374: in execute\n    return self._request(command_info[0], url, body=data)\nf:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py:397: in _request\n    resp = self._conn.request(method, url, body=body, headers=headers)\nf:\\python\\lib\\site-packages\\urllib3\\request.py:80: in request\n    method, url, fields=fields, headers=headers, **urlopen_kw\nf:\\python\\lib\\site-packages\\urllib3\\request.py:171: in request_encode_body\n    return self.urlopen(method, url, **extra_kw)\nf:\\python\\lib\\site-packages\\urllib3\\poolmanager.py:330: in urlopen\n    response = conn.urlopen(method, u.request_uri, **kw)\nf:\\python\\lib\\site-packages\\urllib3\\connectionpool.py:720: in urlopen\n    method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]\nf:\\python\\lib\\site-packages\\urllib3\\util\\retry.py:400: in increment\n    raise six.reraise(type(error), error, _stacktrace)\nf:\\python\\lib\\site-packages\\urllib3\\packages\\six.py:734: in reraise\n    raise value.with_traceback(tb)\nf:\\python\\lib\\site-packages\\urllib3\\connectionpool.py:672: in urlopen\n    chunked=chunked,\nf:\\python\\lib\\site-packages\\urllib3\\connectionpool.py:387: in _make_request\n    conn.request(method, url, **httplib_request_kw)\nf:\\python\\lib\\http\\client.py:1252: in request\n    self._send_request(method, url, body, headers, encode_chunked)\nf:\\python\\lib\\http\\client.py:1298: in _send_request\n    self.endheaders(body, encode_chunked=encode_chunked)\nf:\\python\\lib\\http\\client.py:1247: in endheaders\n    self._send_output(message_body, encode_chunked=encode_chunked)\nf:\\python\\lib\\http\\client.py:1065: in _send_output\n    self.send(chunk)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <urllib3.connection.HTTPConnection object at 0x000002902E940E48>\ndata = b'{\"using\": \"-android uiautomator\", \"value\": \"text(\\\\\"\\\\u53bb\\\\u652f\\\\u4ed8\\\\\")\"}'\n\n    def send(self, data):\n        \"\"\"Send `data' to the server.\n        ``data`` can be a string object, a bytes object, an array object, a\n        file-like object that supports a .read() method, or an iterable object.\n        \"\"\"\n    \n        if self.sock is None:\n            if self.auto_open:\n                self.connect()\n            else:\n                raise NotConnected()\n    \n        if self.debuglevel > 0:\n            print(\"send:\", repr(data))\n        if hasattr(data, \"read\") :\n            if self.debuglevel > 0:\n                print(\"sendIng a read()able\")\n            encode = self._is_textIO(data)\n            if encode and self.debuglevel > 0:\n                print(\"encoding file using iso-8859-1\")\n            while 1:\n                datablock = data.read(self.blocksize)\n                if not datablock:\n                    break\n                if encode:\n                    datablock = datablock.encode(\"iso-8859-1\")\n                self.sock.sendall(datablock)\n            return\n        try:\n>           self.sock.sendall(data)\nE           urllib3.exceptions.ProtocolError: ('Connection aborted.', ConnectionAbortedError(10053, '你的主机中的软件中止了一个已建立的连接。', None, 10053, None))\n\nf:\\python\\lib\\http\\client.py:987: ProtocolError"}, "steps": [{"name": "首页商品加入购物车验证", "status": "broken", "statusDetails": {"message": "urllib3.exceptions.ProtocolError: ('Connection aborted.', ConnectionAbortedError(10053, '你的主机中的软件中止了一个已建立的连接。', None, 10053, None))\n", "trace": "  File \"f:\\python\\lib\\site-packages\\allure_commons\\_allure.py\", line 157, in impl\n    return func(*a, **kw)\n  File \"F:\\shihuituan\\testcase\\mini\\test_2.py\", line 33, in test_mini_home_add_cart\n    a = MiniShoppingCart(mp_driver).mini_op_element_cart_pay()\n  File \"F:\\shihuituan\\action\\miniprogram\\mini_program_shopping_cart.py\", line 82, in mini_op_element_cart_pay\n    self.wait_presence_element(MINI_BUTTON_SHOPPING_CART_PAY)\n  File \"F:\\shihuituan\\action\\base_page.py\", line 25, in wait_presence_element\n    find_element = wait.until(ec.presence_of_element_located(locator))\n  File \"f:\\python\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 71, in until\n    value = method(self._driver)\n  File \"f:\\python\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py\", line 64, in __call__\n    return _find_element(driver, self.locator)\n  File \"f:\\python\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py\", line 411, in _find_element\n    return driver.find_element(*by)\n  File \"f:\\python\\lib\\site-packages\\appium\\webdriver\\webdriver.py\", line 284, in find_element\n    'value': value})['value']\n  File \"f:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 319, in execute\n    response = self.command_executor.execute(driver_command, params)\n  File \"f:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py\", line 374, in execute\n    return self._request(command_info[0], url, body=data)\n  File \"f:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py\", line 397, in _request\n    resp = self._conn.request(method, url, body=body, headers=headers)\n  File \"f:\\python\\lib\\site-packages\\urllib3\\request.py\", line 80, in request\n    method, url, fields=fields, headers=headers, **urlopen_kw\n  File \"f:\\python\\lib\\site-packages\\urllib3\\request.py\", line 171, in request_encode_body\n    return self.urlopen(method, url, **extra_kw)\n  File \"f:\\python\\lib\\site-packages\\urllib3\\poolmanager.py\", line 330, in urlopen\n    response = conn.urlopen(method, u.request_uri, **kw)\n  File \"f:\\python\\lib\\site-packages\\urllib3\\connectionpool.py\", line 720, in urlopen\n    method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]\n  File \"f:\\python\\lib\\site-packages\\urllib3\\util\\retry.py\", line 400, in increment\n    raise six.reraise(type(error), error, _stacktrace)\n  File \"f:\\python\\lib\\site-packages\\urllib3\\packages\\six.py\", line 734, in reraise\n    raise value.with_traceback(tb)\n  File \"f:\\python\\lib\\site-packages\\urllib3\\connectionpool.py\", line 672, in urlopen\n    chunked=chunked,\n  File \"f:\\python\\lib\\site-packages\\urllib3\\connectionpool.py\", line 387, in _make_request\n    conn.request(method, url, **httplib_request_kw)\n  File \"f:\\python\\lib\\http\\client.py\", line 1252, in request\n    self._send_request(method, url, body, headers, encode_chunked)\n  File \"f:\\python\\lib\\http\\client.py\", line 1298, in _send_request\n    self.endheaders(body, encode_chunked=encode_chunked)\n  File \"f:\\python\\lib\\http\\client.py\", line 1247, in endheaders\n    self._send_output(message_body, encode_chunked=encode_chunked)\n  File \"f:\\python\\lib\\http\\client.py\", line 1065, in _send_output\n    self.send(chunk)\n  File \"f:\\python\\lib\\http\\client.py\", line 987, in send\n    self.sock.sendall(data)\n"}, "steps": [{"name": "1：小程序初始化", "status": "passed", "start": 1589459912172, "stop": 1589459958609}, {"name": "2：通过张珊珊小程序链接进入首页", "status": "broken", "statusDetails": {"message": "urllib3.exceptions.ProtocolError: ('Connection aborted.', ConnectionAbortedError(10053, '你的主机中的软件中止了一个已建立的连接。', None, 10053, None))\n", "trace": "  File \"F:\\shihuituan\\testcase\\mini\\test_2.py\", line 33, in test_mini_home_add_cart\n    a = MiniShoppingCart(mp_driver).mini_op_element_cart_pay()\n  File \"F:\\shihuituan\\action\\miniprogram\\mini_program_shopping_cart.py\", line 82, in mini_op_element_cart_pay\n    self.wait_presence_element(MINI_BUTTON_SHOPPING_CART_PAY)\n  File \"F:\\shihuituan\\action\\base_page.py\", line 25, in wait_presence_element\n    find_element = wait.until(ec.presence_of_element_located(locator))\n  File \"f:\\python\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 71, in until\n    value = method(self._driver)\n  File \"f:\\python\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py\", line 64, in __call__\n    return _find_element(driver, self.locator)\n  File \"f:\\python\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py\", line 411, in _find_element\n    return driver.find_element(*by)\n  File \"f:\\python\\lib\\site-packages\\appium\\webdriver\\webdriver.py\", line 284, in find_element\n    'value': value})['value']\n  File \"f:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 319, in execute\n    response = self.command_executor.execute(driver_command, params)\n  File \"f:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py\", line 374, in execute\n    return self._request(command_info[0], url, body=data)\n  File \"f:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py\", line 397, in _request\n    resp = self._conn.request(method, url, body=body, headers=headers)\n  File \"f:\\python\\lib\\site-packages\\urllib3\\request.py\", line 80, in request\n    method, url, fields=fields, headers=headers, **urlopen_kw\n  File \"f:\\python\\lib\\site-packages\\urllib3\\request.py\", line 171, in request_encode_body\n    return self.urlopen(method, url, **extra_kw)\n  File \"f:\\python\\lib\\site-packages\\urllib3\\poolmanager.py\", line 330, in urlopen\n    response = conn.urlopen(method, u.request_uri, **kw)\n  File \"f:\\python\\lib\\site-packages\\urllib3\\connectionpool.py\", line 720, in urlopen\n    method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]\n  File \"f:\\python\\lib\\site-packages\\urllib3\\util\\retry.py\", line 400, in increment\n    raise six.reraise(type(error), error, _stacktrace)\n  File \"f:\\python\\lib\\site-packages\\urllib3\\packages\\six.py\", line 734, in reraise\n    raise value.with_traceback(tb)\n  File \"f:\\python\\lib\\site-packages\\urllib3\\connectionpool.py\", line 672, in urlopen\n    chunked=chunked,\n  File \"f:\\python\\lib\\site-packages\\urllib3\\connectionpool.py\", line 387, in _make_request\n    conn.request(method, url, **httplib_request_kw)\n  File \"f:\\python\\lib\\http\\client.py\", line 1252, in request\n    self._send_request(method, url, body, headers, encode_chunked)\n  File \"f:\\python\\lib\\http\\client.py\", line 1298, in _send_request\n    self.endheaders(body, encode_chunked=encode_chunked)\n  File \"f:\\python\\lib\\http\\client.py\", line 1247, in endheaders\n    self._send_output(message_body, encode_chunked=encode_chunked)\n  File \"f:\\python\\lib\\http\\client.py\", line 1065, in _send_output\n    self.send(chunk)\n  File \"f:\\python\\lib\\http\\client.py\", line 987, in send\n    self.sock.sendall(data)\n"}, "start": 1589459958609, "stop": 1589459980073}], "start": 1589459912172, "stop": 1589459980084}], "start": 1589459912172, "stop": 1589459980085, "uuid": "d15c6e85-bfb6-4922-afcb-5b12ac095c13", "historyId": "c8c055c280c4a3aca0870642d17eac64", "testCaseId": "9c2e531f4c022f93da151a86addf6817", "fullName": "testcase.mini.test_2.TestMiniAddCart#test_mini_home_add_cart", "labels": [{"name": "parentSuite", "value": "testcase.mini"}, {"name": "suite", "value": "test_2"}, {"name": "subSuite", "value": "TestMiniAddCart"}, {"name": "host", "value": "LAPTOP-NFELPBU7"}, {"name": "thread", "value": "1388-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.mini.test_2"}]}