{"name": "test_mini_home_add_cart", "status": "broken", "statusDetails": {"message": "urllib3.exceptions.ProtocolError: ('Connection aborted.', RemoteDisconnected('Remote end closed connection without response'))", "trace": "self = <urllib3.connectionpool.HTTPConnectionPool object at 0x00000269947363C8>, method = 'POST'\nurl = '/wd/hub/session/94b5d97d-fa58-4ec7-8e9b-0efbcafaded9/element'\nbody = '{\"using\": \"-android uiautomator\", \"value\": \"text(\\\\\"\\\\u53bb\\\\u652f\\\\u4ed8\\\\\")\"}'\nheaders = {'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'appium/python 0.49 (selenium/3.141.0 (python windows))'}\nretries = Retry(total=3, connect=None, read=None, redirect=None, status=None), redirect = False, assert_same_host = False\ntimeout = <object object at 0x000002699410D6E0>, pool_timeout = None, release_conn = True, chunked = False, body_pos = None\nresponse_kw = {'request_url': 'http://127.0.0.1:4723/wd/hub/session/94b5d97d-fa58-4ec7-8e9b-0efbcafaded9/element'}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False, timeout_obj = <urllib3.util.timeout.Timeout object at 0x0000026994744C48>\nis_new_proxy_conn = False\n\n    def urlopen(\n        self,\n        method,\n        url,\n        body=None,\n        headers=None,\n        retries=None,\n        redirect=True,\n        assert_same_host=True,\n        timeout=_Default,\n        pool_timeout=None,\n        release_conn=None,\n        chunked=False,\n        body_pos=None,\n        **response_kw\n    ):\n        \"\"\"\n        Get a connection from the pool and perform an HTTP request. This is the\n        lowest level call for making a request, so you'll need to specify all\n        the raw details.\n    \n        .. note::\n    \n           More commonly, it's appropriate to use a convenience method provided\n           by :class:`.RequestMethods`, such as :meth:`request`.\n    \n        .. note::\n    \n           `release_conn` will only behave as expected if\n           `preload_content=False` because we want to make\n           `preload_content=False` the default behaviour someday soon without\n           breaking backwards compatibility.\n    \n        :param method:\n            HTTP request method (such as GET, POST, PUT, etc.)\n    \n        :param body:\n            Data to send in the request body (useful for creating\n            POST requests, see HTTPConnectionPool.post_url for\n            more convenience).\n    \n        :param headers:\n            Dictionary of custom headers to send, such as User-Agent,\n            If-None-Match, etc. If None, pool headers are used. If provided,\n            these headers completely replace any pool-specific headers.\n    \n        :param retries:\n            Configure the number of retries to allow before raising a\n            :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n            Pass ``None`` to retry until you receive a response. Pass a\n            :class:`~urllib3.util.retry.Retry` object for fine-grained control\n            over different types of retries.\n            Pass an integer number to retry connection errors that many times,\n            but no other types of errors. Pass zero to never retry.\n    \n            If ``False``, then retries are disabled and any exception is raised\n            immediately. Also, instead of raising a MaxRetryError on redirects,\n            the redirect response will be returned.\n    \n        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n        :param redirect:\n            If True, automatically handle redirects (status codes 301, 302,\n            303, 307, 308). Each redirect counts as a retry. Disabling retries\n            will disable redirect, too.\n    \n        :param assert_same_host:\n            If ``True``, will make sure that the host of the pool requests is\n            consistent else will raise HostChangedError. When False, you can\n            use the pool on an HTTP proxy and request foreign hosts.\n    \n        :param timeout:\n            If specified, overrides the default timeout for this one\n            request. It may be a float (in seconds) or an instance of\n            :class:`urllib3.util.Timeout`.\n    \n        :param pool_timeout:\n            If set and the pool is set to block=True, then this method will\n            block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n            connection is available within the time period.\n    \n        :param release_conn:\n            If False, then the urlopen call will not release the connection\n            back into the pool once a response is received (but will release if\n            you read the entire contents of the response such as when\n            `preload_content=True`). This is useful if you're not preloading\n            the response's content immediately. You will need to call\n            ``r.release_conn()`` on the response ``r`` to return the connection\n            back into the pool. If None, it takes the value of\n            ``response_kw.get('preload_content', True)``.\n    \n        :param chunked:\n            If True, urllib3 will send the body using chunked transfer\n            encoding. Otherwise, urllib3 will send the body using the standard\n            content-length form. Defaults to False.\n    \n        :param int body_pos:\n            Position to seek to in file-like body in the event of a retry or\n            redirect. Typically this won't need to be set because urllib3 will\n            auto-populate the value when needed.\n    \n        :param \\\\**response_kw:\n            Additional parameters are passed to\n            :meth:`urllib3.response.HTTPResponse.from_httplib`\n        \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get(\"preload_content\", True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        # Ensure that the URL we're connecting to is properly encoded\n        if url.startswith(\"/\"):\n            url = six.ensure_str(_encode_target(url))\n        else:\n            url = six.ensure_str(parse_url(url).url)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/urllib3/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == \"http\":\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(\n                conn, \"sock\", None\n            )\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(\n                conn,\n                method,\n                url,\n                timeout=timeout_obj,\n                body=body,\n                headers=headers,\n>               chunked=chunked,\n            )\n\nf:\\python\\lib\\site-packages\\urllib3\\connectionpool.py:672: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <urllib3.connectionpool.HTTPConnectionPool object at 0x00000269947363C8>, conn = <urllib3.connection.HTTPConnection object at 0x000002699472AE08>\nmethod = 'POST', url = '/wd/hub/session/94b5d97d-fa58-4ec7-8e9b-0efbcafaded9/element'\ntimeout = <urllib3.util.timeout.Timeout object at 0x0000026994744C48>, chunked = False\nhttplib_request_kw = {'body': '{\"using\": \"-android uiautomator\", \"value\": \"text(\\\\\"\\\\u53bb\\\\u652f\\\\u4ed8\\\\\")\"}', 'headers': {'Accept': 'app...ntent-Type': 'application/json;charset=UTF-8', 'User-Agent': 'appium/python 0.49 (selenium/3.141.0 (python windows))'}}\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x0000026994744C88>, read_timeout = <object object at 0x00000269935B1500>\n\n    def _make_request(\n        self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw\n    ):\n        \"\"\"\n        Perform a request on a given urllib connection object taken from our\n        pool.\n    \n        :param conn:\n            a connection from one of our connection pools\n    \n        :param timeout:\n            Socket timeout in seconds for the request. This can be a\n            float or integer, which will set the same timeout value for\n            the socket connect and the socket read, or an instance of\n            :class:`urllib3.util.Timeout`, which gives you more fine-grained\n            control over your timeouts.\n        \"\"\"\n        self.num_requests += 1\n    \n        timeout_obj = self._get_timeout(timeout)\n        timeout_obj.start_connect()\n        conn.timeout = timeout_obj.connect_timeout\n    \n        # Trigger any extra validation we need to do.\n        try:\n            self._validate_conn(conn)\n        except (SocketTimeout, BaseSSLError) as e:\n            # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.\n            self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n            raise\n    \n        # conn.request() calls httplib.*.request, not the method in\n        # urllib3.request. It also calls makefile (recv) on the socket.\n        if chunked:\n            conn.request_chunked(method, url, **httplib_request_kw)\n        else:\n            conn.request(method, url, **httplib_request_kw)\n    \n        # Reset the timeout for the recv() on the socket\n        read_timeout = timeout_obj.read_timeout\n    \n        # App Engine doesn't have a sock attr\n        if getattr(conn, \"sock\", None):\n            # In Python 3 socket.py will catch EAGAIN and return None when you\n            # try and read into the file pointer created by http.client, which\n            # instead raises a BadStatusLine exception. Instead of catching\n            # the exception and assuming all BadStatusLine exceptions are read\n            # timeouts, check for a zero timeout before making the request.\n            if read_timeout == 0:\n                raise ReadTimeoutError(\n                    self, url, \"Read timed out. (read timeout=%s)\" % read_timeout\n                )\n            if read_timeout is Timeout.DEFAULT_TIMEOUT:\n                conn.sock.settimeout(socket.getdefaulttimeout())\n            else:  # None or a value\n                conn.sock.settimeout(read_timeout)\n    \n        # Receive the response from the server\n        try:\n            try:\n                # Python 2.7, use buffering of HTTP responses\n                httplib_response = conn.getresponse(buffering=True)\n            except TypeError:\n                # Python 3\n                try:\n                    httplib_response = conn.getresponse()\n                except BaseException as e:\n                    # Remove the TypeError from the exception chain in\n                    # Python 3 (including for exceptions like SystemExit).\n                    # Otherwise it looks like a bug in the code.\n>                   six.raise_from(e, None)\n\nf:\\python\\lib\\site-packages\\urllib3\\connectionpool.py:421: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nvalue = None, from_value = None\n\n>   ???\n\n<string>:3: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <urllib3.connectionpool.HTTPConnectionPool object at 0x00000269947363C8>, conn = <urllib3.connection.HTTPConnection object at 0x000002699472AE08>\nmethod = 'POST', url = '/wd/hub/session/94b5d97d-fa58-4ec7-8e9b-0efbcafaded9/element'\ntimeout = <urllib3.util.timeout.Timeout object at 0x0000026994744C48>, chunked = False\nhttplib_request_kw = {'body': '{\"using\": \"-android uiautomator\", \"value\": \"text(\\\\\"\\\\u53bb\\\\u652f\\\\u4ed8\\\\\")\"}', 'headers': {'Accept': 'app...ntent-Type': 'application/json;charset=UTF-8', 'User-Agent': 'appium/python 0.49 (selenium/3.141.0 (python windows))'}}\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x0000026994744C88>, read_timeout = <object object at 0x00000269935B1500>\n\n    def _make_request(\n        self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw\n    ):\n        \"\"\"\n        Perform a request on a given urllib connection object taken from our\n        pool.\n    \n        :param conn:\n            a connection from one of our connection pools\n    \n        :param timeout:\n            Socket timeout in seconds for the request. This can be a\n            float or integer, which will set the same timeout value for\n            the socket connect and the socket read, or an instance of\n            :class:`urllib3.util.Timeout`, which gives you more fine-grained\n            control over your timeouts.\n        \"\"\"\n        self.num_requests += 1\n    \n        timeout_obj = self._get_timeout(timeout)\n        timeout_obj.start_connect()\n        conn.timeout = timeout_obj.connect_timeout\n    \n        # Trigger any extra validation we need to do.\n        try:\n            self._validate_conn(conn)\n        except (SocketTimeout, BaseSSLError) as e:\n            # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.\n            self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n            raise\n    \n        # conn.request() calls httplib.*.request, not the method in\n        # urllib3.request. It also calls makefile (recv) on the socket.\n        if chunked:\n            conn.request_chunked(method, url, **httplib_request_kw)\n        else:\n            conn.request(method, url, **httplib_request_kw)\n    \n        # Reset the timeout for the recv() on the socket\n        read_timeout = timeout_obj.read_timeout\n    \n        # App Engine doesn't have a sock attr\n        if getattr(conn, \"sock\", None):\n            # In Python 3 socket.py will catch EAGAIN and return None when you\n            # try and read into the file pointer created by http.client, which\n            # instead raises a BadStatusLine exception. Instead of catching\n            # the exception and assuming all BadStatusLine exceptions are read\n            # timeouts, check for a zero timeout before making the request.\n            if read_timeout == 0:\n                raise ReadTimeoutError(\n                    self, url, \"Read timed out. (read timeout=%s)\" % read_timeout\n                )\n            if read_timeout is Timeout.DEFAULT_TIMEOUT:\n                conn.sock.settimeout(socket.getdefaulttimeout())\n            else:  # None or a value\n                conn.sock.settimeout(read_timeout)\n    \n        # Receive the response from the server\n        try:\n            try:\n                # Python 2.7, use buffering of HTTP responses\n                httplib_response = conn.getresponse(buffering=True)\n            except TypeError:\n                # Python 3\n                try:\n>                   httplib_response = conn.getresponse()\n\nf:\\python\\lib\\site-packages\\urllib3\\connectionpool.py:416: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <urllib3.connection.HTTPConnection object at 0x000002699472AE08>\n\n    def getresponse(self):\n        \"\"\"Get the response from the server.\n    \n        If the HTTPConnection is in the correct state, returns an\n        instance of HTTPResponse or of whatever object is returned by\n        the response_class variable.\n    \n        If a request has not been sent or if a previous response has\n        not be handled, ResponseNotReady is raised.  If the HTTP\n        response indicates that the connection should be closed, then\n        it will be closed before the response is returned.  When the\n        connection is closed, the underlying socket is closed.\n        \"\"\"\n    \n        # if a prior response has been completed, then forget about it.\n        if self.__response and self.__response.isclosed():\n            self.__response = None\n    \n        # if a prior response exists, then it must be completed (otherwise, we\n        # cannot read this response's header to determine the connection-close\n        # behavior)\n        #\n        # note: if a prior response existed, but was connection-close, then the\n        # socket and response were made independent of this HTTPConnection\n        # object since a new request requires that we open a whole new\n        # connection\n        #\n        # this means the prior response had one of two states:\n        #   1) will_close: this connection was reset and the prior socket and\n        #                  response operate independently\n        #   2) persistent: the response was retained and we await its\n        #                  isclosed() status to become true.\n        #\n        if self.__state != _CS_REQ_SENT or self.__response:\n            raise ResponseNotReady(self.__state)\n    \n        if self.debuglevel > 0:\n            response = self.response_class(self.sock, self.debuglevel,\n                                           method=self._method)\n        else:\n            response = self.response_class(self.sock, method=self._method)\n    \n        try:\n            try:\n>               response.begin()\n\nf:\\python\\lib\\http\\client.py:1344: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <http.client.HTTPResponse object at 0x0000026994744848>\n\n    def begin(self):\n        if self.headers is not None:\n            # we've already started reading the response\n            return\n    \n        # read until we get a non-100 response\n        while True:\n>           version, status, reason = self._read_status()\n\nf:\\python\\lib\\http\\client.py:306: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <http.client.HTTPResponse object at 0x0000026994744848>\n\n    def _read_status(self):\n        line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n        if len(line) > _MAXLINE:\n            raise LineTooLong(\"status line\")\n        if self.debuglevel > 0:\n            print(\"reply:\", repr(line))\n        if not line:\n            # Presumably, the server closed the connection before\n            # sending a valid response.\n>           raise RemoteDisconnected(\"Remote end closed connection without\"\n                                     \" response\")\nE           http.client.RemoteDisconnected: Remote end closed connection without response\n\nf:\\python\\lib\\http\\client.py:275: RemoteDisconnected\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testcase.mini.test_2.TestMiniAddCart object at 0x0000026994707588>\n\n       @allure.step(\"首页商品加入购物车验证\")\n       def test_mini_home_add_cart(self):\n           with allure.step('1：小程序初始化'):\n               mp_driver = Login().go_in()\n           with allure.step('2：通过张珊珊小程序链接进入首页'):\n               MiniDifferentName(mp_driver).mini_op_name_link_z()\n               time.sleep(5)\n               MiniShoppingCart(mp_driver).mini_op_shopping_cart()\n               time.sleep(5)\n    #           try:\n               i = 1\n               for i in range(8):\n    \n    \n>                      a = MiniShoppingCart(mp_driver).mini_op_element_cart_pay()\n\ntestcase\\mini\\test_2.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\naction\\miniprogram\\mini_program_shopping_cart.py:82: in mini_op_element_cart_pay\n    ???\naction\\base_page.py:25: in wait_presence_element\n    find_element = wait.until(ec.presence_of_element_located(locator))\nf:\\python\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:71: in until\n    value = method(self._driver)\nf:\\python\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:64: in __call__\n    return _find_element(driver, self.locator)\nf:\\python\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:411: in _find_element\n    return driver.find_element(*by)\nf:\\python\\lib\\site-packages\\appium\\webdriver\\webdriver.py:284: in find_element\n    'value': value})['value']\nf:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:319: in execute\n    response = self.command_executor.execute(driver_command, params)\nf:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py:374: in execute\n    return self._request(command_info[0], url, body=data)\nf:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py:397: in _request\n    resp = self._conn.request(method, url, body=body, headers=headers)\nf:\\python\\lib\\site-packages\\urllib3\\request.py:80: in request\n    method, url, fields=fields, headers=headers, **urlopen_kw\nf:\\python\\lib\\site-packages\\urllib3\\request.py:171: in request_encode_body\n    return self.urlopen(method, url, **extra_kw)\nf:\\python\\lib\\site-packages\\urllib3\\poolmanager.py:330: in urlopen\n    response = conn.urlopen(method, u.request_uri, **kw)\nf:\\python\\lib\\site-packages\\urllib3\\connectionpool.py:720: in urlopen\n    method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]\nf:\\python\\lib\\site-packages\\urllib3\\util\\retry.py:400: in increment\n    raise six.reraise(type(error), error, _stacktrace)\nf:\\python\\lib\\site-packages\\urllib3\\packages\\six.py:734: in reraise\n    raise value.with_traceback(tb)\nf:\\python\\lib\\site-packages\\urllib3\\connectionpool.py:672: in urlopen\n    chunked=chunked,\nf:\\python\\lib\\site-packages\\urllib3\\connectionpool.py:421: in _make_request\n    six.raise_from(e, None)\n<string>:3: in raise_from\n    ???\nf:\\python\\lib\\site-packages\\urllib3\\connectionpool.py:416: in _make_request\n    httplib_response = conn.getresponse()\nf:\\python\\lib\\http\\client.py:1344: in getresponse\n    response.begin()\nf:\\python\\lib\\http\\client.py:306: in begin\n    version, status, reason = self._read_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <http.client.HTTPResponse object at 0x0000026994744848>\n\n    def _read_status(self):\n        line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n        if len(line) > _MAXLINE:\n            raise LineTooLong(\"status line\")\n        if self.debuglevel > 0:\n            print(\"reply:\", repr(line))\n        if not line:\n            # Presumably, the server closed the connection before\n            # sending a valid response.\n>           raise RemoteDisconnected(\"Remote end closed connection without\"\n                                     \" response\")\nE           urllib3.exceptions.ProtocolError: ('Connection aborted.', RemoteDisconnected('Remote end closed connection without response'))\n\nf:\\python\\lib\\http\\client.py:275: ProtocolError"}, "steps": [{"name": "首页商品加入购物车验证", "status": "broken", "statusDetails": {"message": "urllib3.exceptions.ProtocolError: ('Connection aborted.', RemoteDisconnected('Remote end closed connection without response'))\n", "trace": "  File \"f:\\python\\lib\\site-packages\\allure_commons\\_allure.py\", line 157, in impl\n    return func(*a, **kw)\n  File \"F:\\shihuituan\\testcase\\mini\\test_2.py\", line 33, in test_mini_home_add_cart\n    a = MiniShoppingCart(mp_driver).mini_op_element_cart_pay()\n  File \"F:\\shihuituan\\action\\miniprogram\\mini_program_shopping_cart.py\", line 82, in mini_op_element_cart_pay\n    # 去支付\n  File \"F:\\shihuituan\\action\\base_page.py\", line 25, in wait_presence_element\n    find_element = wait.until(ec.presence_of_element_located(locator))\n  File \"f:\\python\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 71, in until\n    value = method(self._driver)\n  File \"f:\\python\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py\", line 64, in __call__\n    return _find_element(driver, self.locator)\n  File \"f:\\python\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py\", line 411, in _find_element\n    return driver.find_element(*by)\n  File \"f:\\python\\lib\\site-packages\\appium\\webdriver\\webdriver.py\", line 284, in find_element\n    'value': value})['value']\n  File \"f:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 319, in execute\n    response = self.command_executor.execute(driver_command, params)\n  File \"f:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py\", line 374, in execute\n    return self._request(command_info[0], url, body=data)\n  File \"f:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py\", line 397, in _request\n    resp = self._conn.request(method, url, body=body, headers=headers)\n  File \"f:\\python\\lib\\site-packages\\urllib3\\request.py\", line 80, in request\n    method, url, fields=fields, headers=headers, **urlopen_kw\n  File \"f:\\python\\lib\\site-packages\\urllib3\\request.py\", line 171, in request_encode_body\n    return self.urlopen(method, url, **extra_kw)\n  File \"f:\\python\\lib\\site-packages\\urllib3\\poolmanager.py\", line 330, in urlopen\n    response = conn.urlopen(method, u.request_uri, **kw)\n  File \"f:\\python\\lib\\site-packages\\urllib3\\connectionpool.py\", line 720, in urlopen\n    method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]\n  File \"f:\\python\\lib\\site-packages\\urllib3\\util\\retry.py\", line 400, in increment\n    raise six.reraise(type(error), error, _stacktrace)\n  File \"f:\\python\\lib\\site-packages\\urllib3\\packages\\six.py\", line 734, in reraise\n    raise value.with_traceback(tb)\n  File \"f:\\python\\lib\\site-packages\\urllib3\\connectionpool.py\", line 672, in urlopen\n    chunked=chunked,\n  File \"f:\\python\\lib\\site-packages\\urllib3\\connectionpool.py\", line 421, in _make_request\n    six.raise_from(e, None)\n  File \"<string>\", line 3, in raise_from\n  File \"f:\\python\\lib\\site-packages\\urllib3\\connectionpool.py\", line 416, in _make_request\n    httplib_response = conn.getresponse()\n  File \"f:\\python\\lib\\http\\client.py\", line 1344, in getresponse\n    response.begin()\n  File \"f:\\python\\lib\\http\\client.py\", line 306, in begin\n    version, status, reason = self._read_status()\n  File \"f:\\python\\lib\\http\\client.py\", line 275, in _read_status\n    raise RemoteDisconnected(\"Remote end closed connection without\"\n"}, "steps": [{"name": "1：小程序初始化", "status": "passed", "start": 1589460017544, "stop": 1589460064777}, {"name": "2：通过张珊珊小程序链接进入首页", "status": "broken", "statusDetails": {"message": "urllib3.exceptions.ProtocolError: ('Connection aborted.', RemoteDisconnected('Remote end closed connection without response'))\n", "trace": "  File \"F:\\shihuituan\\testcase\\mini\\test_2.py\", line 33, in test_mini_home_add_cart\n    a = MiniShoppingCart(mp_driver).mini_op_element_cart_pay()\n  File \"F:\\shihuituan\\action\\miniprogram\\mini_program_shopping_cart.py\", line 82, in mini_op_element_cart_pay\n    # 去支付\n  File \"F:\\shihuituan\\action\\base_page.py\", line 25, in wait_presence_element\n    find_element = wait.until(ec.presence_of_element_located(locator))\n  File \"f:\\python\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 71, in until\n    value = method(self._driver)\n  File \"f:\\python\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py\", line 64, in __call__\n    return _find_element(driver, self.locator)\n  File \"f:\\python\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py\", line 411, in _find_element\n    return driver.find_element(*by)\n  File \"f:\\python\\lib\\site-packages\\appium\\webdriver\\webdriver.py\", line 284, in find_element\n    'value': value})['value']\n  File \"f:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 319, in execute\n    response = self.command_executor.execute(driver_command, params)\n  File \"f:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py\", line 374, in execute\n    return self._request(command_info[0], url, body=data)\n  File \"f:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py\", line 397, in _request\n    resp = self._conn.request(method, url, body=body, headers=headers)\n  File \"f:\\python\\lib\\site-packages\\urllib3\\request.py\", line 80, in request\n    method, url, fields=fields, headers=headers, **urlopen_kw\n  File \"f:\\python\\lib\\site-packages\\urllib3\\request.py\", line 171, in request_encode_body\n    return self.urlopen(method, url, **extra_kw)\n  File \"f:\\python\\lib\\site-packages\\urllib3\\poolmanager.py\", line 330, in urlopen\n    response = conn.urlopen(method, u.request_uri, **kw)\n  File \"f:\\python\\lib\\site-packages\\urllib3\\connectionpool.py\", line 720, in urlopen\n    method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]\n  File \"f:\\python\\lib\\site-packages\\urllib3\\util\\retry.py\", line 400, in increment\n    raise six.reraise(type(error), error, _stacktrace)\n  File \"f:\\python\\lib\\site-packages\\urllib3\\packages\\six.py\", line 734, in reraise\n    raise value.with_traceback(tb)\n  File \"f:\\python\\lib\\site-packages\\urllib3\\connectionpool.py\", line 672, in urlopen\n    chunked=chunked,\n  File \"f:\\python\\lib\\site-packages\\urllib3\\connectionpool.py\", line 421, in _make_request\n    six.raise_from(e, None)\n  File \"<string>\", line 3, in raise_from\n  File \"f:\\python\\lib\\site-packages\\urllib3\\connectionpool.py\", line 416, in _make_request\n    httplib_response = conn.getresponse()\n  File \"f:\\python\\lib\\http\\client.py\", line 1344, in getresponse\n    response.begin()\n  File \"f:\\python\\lib\\http\\client.py\", line 306, in begin\n    version, status, reason = self._read_status()\n  File \"f:\\python\\lib\\http\\client.py\", line 275, in _read_status\n    raise RemoteDisconnected(\"Remote end closed connection without\"\n"}, "start": 1589460064777, "stop": 1589460084744}], "start": 1589460017543, "stop": 1589460084748}], "start": 1589460017543, "stop": 1589460084749, "uuid": "c81acdcc-46f2-4ce9-9954-d66721789cf4", "historyId": "c8c055c280c4a3aca0870642d17eac64", "testCaseId": "9c2e531f4c022f93da151a86addf6817", "fullName": "testcase.mini.test_2.TestMiniAddCart#test_mini_home_add_cart", "labels": [{"name": "parentSuite", "value": "testcase.mini"}, {"name": "suite", "value": "test_2"}, {"name": "subSuite", "value": "TestMiniAddCart"}, {"name": "host", "value": "LAPTOP-NFELPBU7"}, {"name": "thread", "value": "4880-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.mini.test_2"}]}